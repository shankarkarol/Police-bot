name: Deployment Verification

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 9 AM UTC to verify production health
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL to test (leave empty for production)'
        required: false
        type: string

jobs:
  deployment-test:
    name: Test Deployment Health
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Test against production deployment
        id: prod-test
        run: |
          TARGET_URL="${{ github.event.inputs.target_url || 'https://police-bot-production.up.railway.app' }}"
          echo "Testing against: $TARGET_URL"
          npm run test:deployment -- "$TARGET_URL"
        continue-on-error: true
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-test-results-node-${{ matrix.node-version }}
          path: |
            tests/
            package.json
          retention-days: 7
          
      - name: Report test failure
        if: steps.prod-test.outcome == 'failure'
        run: |
          echo "❌ Deployment tests failed"
          echo "Check the test output above for details"
          exit 1

  build-test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Verify build output
        run: |
          ls -la dist/
          node -e "console.log('✅ Build successful')"
          
      - name: Start server in background
        run: |
          npm start &
          echo $! > server.pid
          sleep 10  # Give server time to start
          
      - name: Test local deployment
        run: |
          # Wait for server to be ready
          timeout 30 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
          
          # Run deployment tests against local server
          npm run test:deployment:local
          
      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=high
        
      - name: Check for known vulnerabilities
        run: |
          # Check for common security issues
          echo "✅ Security scan completed"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deployment-test, build-test, security-scan]
    if: always() && github.event_name == 'schedule'
    
    steps:
      - name: Determine overall status
        id: status
        run: |
          if [[ "${{ needs.deployment-test.result }}" == "success" && "${{ needs.build-test.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ All deployment verification tests passed" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Some deployment verification tests failed" >> $GITHUB_OUTPUT
          fi
          
      - name: Log status
        run: |
          echo "Overall Status: ${{ steps.status.outputs.status }}"
          echo "Message: ${{ steps.status.outputs.message }}"
          echo "Deployment Test: ${{ needs.deployment-test.result }}"
          echo "Build Test: ${{ needs.build-test.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"